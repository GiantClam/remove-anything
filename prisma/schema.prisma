generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Custom fields for your app
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations to existing tables
  chargeOrders           ChargeOrder[]
  claimedActivityOrders  ClaimedActivityOrder[]
  fluxData               FluxData[]
  fluxDownloads          FluxDownloads[]
  fluxViews              FluxViews[]
  giftCodes              GiftCode[]
  userBillings           UserBilling[]
  userCredits            UserCredit[]
  userCreditTransactions UserCreditTransaction[]
  userPaymentInfos       UserPaymentInfo[]
  batchTasks             BatchTask[]
  backgroundRemovalTasks BackgroundRemovalTask[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ChargeOrder {
  id        Int       @id @default(autoincrement())
  userId    String    @map(name: "user_id")
  userInfo  String?   @map(name: "user_info")
  amount    Int
  credit    Int
  phase     String
  channel   String
  currency  String
  paymentAt DateTime? @map(name: "payment_at")
  result    String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "charge_order")
}

model ClaimedActivityOrder {
  id            Int      @id @default(autoincrement())
  chargeOrderId Int      @map(name: "charge_order_id")
  userId        String   @map(name: "user_id")
  credit        Int
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @default(now()) @map(name: "updated_at")
  activityCode  String   @map(name: "activity_code")
  transactionId Int?     @map(name: "transaction_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "claimed_activity_order")
}

model ChargeProduct {
  id             Int      @id @default(autoincrement())
  amount         Int
  originalAmount Int      @map(name: "original_amount")
  credit         Int
  currency       String
  locale         String
  title          String
  tag            String?
  message        String?
  state          String
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "charge_product")
}

model BatchTask {
  id              Int      @id @default(autoincrement())
  userId          String   @map(name: "user_id")
  taskType        String   @map(name: "task_type")
  totalImages     Int      @map(name: "total_images")
  completedImages Int      @default(0) @map(name: "completed_images")
  failedImages    Int      @default(0) @map(name: "failed_images")
  status          String   @default("Processing")
  metadata        Json?
  createdAt       DateTime @default(now()) @map(name: "created_at")
  completedAt     DateTime? @map(name: "completed_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fluxData FluxData[]

  @@map(name: "batch_tasks")
}

model FluxData {
  id               Int      @id @default(autoincrement())
  userId           String   @map(name: "user_id")
  replicateId      String   @map(name: "replicate_id")
  inputPrompt      String?  @map(name: "input_prompt")
  executePrompt    String?  @map(name: "execute_prompt")
  steps            Int?
  guidance         Int?
  interval         Int?
  inputImageUrl    String?  @map(name: "input_image_url")
  imageUrl         String?  @map(name: "image_url")
  model            String
  executeStartTime Int?  @map(name: "execute_start_time")
  executeEndTime   Int?  @map(name: "execute_end_time")
  locale           String?
  aspectRatio      String   @map("aspect_ratio")
  safetyTolerance  Int?     @map("safety_tolerance")
  seed             Int?
  taskStatus       String   @map(name: "task_status")
  isPrivate        Boolean? @default(false) @map(name: "is_private")
  downloadNum      Int      @default(0) @map(name: "download_num")
  viewsNum         Int      @default(0) @map(name: "views_num")
  createdAt        DateTime @default(now()) @map(name: "created_at")
  updatedAt        DateTime @default(now()) @map(name: "updated_at")
  errorMsg         String?  @map(name: "error_msg")
  loraUrl          String?  @map("lora_url")
  loraName         String?  @map("lora_name")
  loraScale        Float?   @map("lora_scale")
  batchTaskId      Int?     @map(name: "batch_task_id")
  batchIndex       Int?     @map(name: "batch_index")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  batchTask BatchTask? @relation(fields: [batchTaskId], references: [id], onDelete: Cascade)

  @@map(name: "flux_data")
}

model BackgroundRemovalTask {
  id               Int       @id @default(autoincrement())
  userId           String?   @map(name: "user_id")
  replicateId      String    @unique @map(name: "replicate_id")
  inputImageUrl    String    @map(name: "input_image_url")
  outputImageUrl   String?   @map(name: "output_image_url")
  resolution       String?   @default("1024x1024")
  model            String    @default("men1scus/birefnet")
  taskStatus       String    @map(name: "task_status") @default("pending")
  executeStartTime Int?   @map(name: "execute_start_time")
  executeEndTime   Int?   @map(name: "execute_end_time")
  errorMsg         String?   @map(name: "error_msg")
  downloadCount    Int       @default(0) @map(name: "download_count")
  viewCount        Int       @default(0) @map(name: "view_count")
  isPublic         Boolean   @default(true) @map(name: "is_public")
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime  @updatedAt @map(name: "updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "background_removal_tasks")
  @@index([userId])
  @@index([taskStatus])
  @@index([createdAt])
}

model FluxDownloads {
  id        Int      @id @default(autoincrement())
  fluxId    Int      @map(name: "flux_id")
  userId    String   @map(name: "user_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "flux_downloads")
}

model FluxViews {
  id        Int      @id @default(autoincrement())
  fluxId    Int      @map(name: "flux_id")
  userId    String   @map(name: "user_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "flux_views")
}

model GiftCode {
  id            Int       @id @default(autoincrement())
  code          String
  creditAmount  Int       @map(name: "credit_amount")
  used          Boolean?  @default(false)
  usedBy        String?   @map(name: "used_by")
  usedAt        DateTime? @map(name: "used_at")
  transactionId Int?      @map(name: "transaction_id")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  expiredAt     DateTime? @map(name: "expired_at")

  user User? @relation(fields: [usedBy], references: [id], onDelete: SetNull)

  @@map(name: "gift_code")
}

model media {
  id        Int      @id @default(autoincrement())
  name      String
  key       String
  url       String
  color     String?
  blurhash  String?
  fileSize  Int      @map(name: "file_size")
  fileType  String   @map(name: "file_type")
  md5       String
  ext       String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model newsletters {
  id        Int       @id @default(autoincrement())
  subject   String?
  body      String?
  locale    String?
  sentAt    DateTime? @map(name: "sent_at")
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
}

model subscribers {
  id             Int       @id @default(autoincrement())
  email          String?
  token          String?
  locale         String?
  subscribedAt   DateTime? @map(name: "subscribed_at")
  unsubscribedAt DateTime? @map(name: "unsubscribed_at")

  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model UserBilling {
  id          Int      @id @default(autoincrement())
  userId      String   @map(name: "user_id")
  state       String
  amount      Int
  type        String
  fluxId      Int?     @map(name: "flux_id")
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_billing")
}

model UserCredit {
  id        Int      @id @default(autoincrement())
  userId    String   @map(name: "user_id")
  credit    Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_credit")
}

model UserCreditTransaction {
  id        Int      @id @default(autoincrement())
  userId    String   @map(name: "user_id")
  credit    Int
  balance   Int
  billingId Int?     @map(name: "billing_id")
  type      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_credit_transaction")
}

model UserPaymentInfo {
  id                     Int       @id @default(autoincrement())
  userId                 String    @map(name: "user_id")
  userInfo               String?   @map(name: "user_info")
  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_payment_info")
}
